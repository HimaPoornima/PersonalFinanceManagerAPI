/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.javaj2eefsd.workshop.api;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import com.javaj2eefsd.workshop.model.BankAccount;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

//IDIOM:Item-0032: Add a useful javadoc comment to each class,interface,Enum declaration.
/**
* BankAccountApi interface is used to create the bankaccount API resource
*/
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-06T07:36:56.089+05:30")

@Api(value = "bankAccount", description = "the bankAccount API")
public interface BankAccountApi {

    @ApiOperation(value = "Create new bank account", nickname = "addBankAccount", notes = "Creates new bank account", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "bankAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/bankAccount/new",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<ApiResponseMessage> addBankAccount(
    		@ApiParam(value = "Bank Account object that needs to be added to the store" ,required=true )  @Valid @RequestBody BankAccount body)
    		throws Exception;


    @ApiOperation(value = "Deletes a bank account", nickname = "deleteBankAccount", notes = "Deletes the bank account", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "bankAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Bank Account not found") })
    @RequestMapping(value = "/bankAccount/delete/{bankAccountId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<ApiResponseMessage> deleteBankAccount(
    		@ApiParam(value = "Bank Account id to delete",required=true) @PathVariable("bankAccountId") String bankAccountId)
    		throws Exception;
    
    
    @ApiOperation(value = "get bankAccount by id", nickname = "getBankAccount", notes = "Returns the particular bankAccount", response = BankAccount.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "bankAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BankAccount.class) })
    @RequestMapping(value = "/bankAccount/{bankAccountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> getBankAccount(
    		@ApiParam(value = "id to search for bankAccount",required=true) @PathVariable("bankAccountId") String bankAccountId)
    		throws Exception;
    
    
    @ApiOperation(value = "Searches Bank Accounts by bankAccountKey", nickname = "getBankAccountByKey", notes = "Returns all bank accounts matching the bankAccountKey", response = BankAccount.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "bankAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BankAccount.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Bank Account not found") })
    @RequestMapping(value = "/bankAccount/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> getBankAccountByKey(
    		@NotNull @ApiParam(value = "Key to search for Bank Accounts", required = true) @Valid @RequestParam(value = "bankAccountKey", required = true) String bankAccountKey)
    		throws Exception;


    @ApiOperation(value = "bank accounts list", nickname = "getBankAccountsList", notes = "Returns the list of bank accounts", response = BankAccount.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "bankAccount", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = BankAccount.class, responseContainer = "List") })
    @RequestMapping(value = "/bankAccount/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> getBankAccountsList() throws Exception;

}
