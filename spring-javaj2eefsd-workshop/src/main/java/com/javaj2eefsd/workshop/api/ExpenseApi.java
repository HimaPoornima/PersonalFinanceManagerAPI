/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.javaj2eefsd.workshop.api;

import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import com.javaj2eefsd.workshop.model.Expense;
import com.javaj2eefsd.workshop.model.Income;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;


@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-06-06T07:36:56.089+05:30")

@Api(value = "expense", description = "the expense API")
public interface ExpenseApi {

    @ApiOperation(value = "Create new expense", nickname = "addExpense", notes = "Creates new expense", authorizations = {
            @Authorization(value = "bearerAuth")
    }, tags = { "expense", })
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/expense/new", produces = { "application/json" }, consumes = {
            "application/json" }, method = RequestMethod.PUT)
    ResponseEntity<Void> addExpense(
            @ApiParam(value = "Expense object that needs to be added to the store", required = true) @Valid @RequestBody Expense body)
            throws Exception;

    @ApiOperation(value = "Deletes a expense", nickname = "deleteExpense", notes = "Deltes the expense", authorizations = {
            @Authorization(value = "bearerAuth")
    }, tags = { "expense", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Expense not found") })
    @RequestMapping(value = "/expense/delete/{expenseId}", produces = {
            "application/json" }, method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteExpense(
            @ApiParam(value = "Expense id to delete", required = true) @PathVariable("expenseId") String expenseId)
            throws Exception;

    @ApiOperation(value = "find search expense details.", nickname = "getExpenseByKey", notes = "retrieve all expense. this will include personal expense information.", response = Expense.class, responseContainer = "List", authorizations = {
            @Authorization(value = "bearerAuth")
    }, tags = { "expense", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Expense.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Expense not found") })
    @RequestMapping(value = "/expense/search", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<List<Expense>> getExpenseByKey(
            @NotNull @ApiParam(value = "ID of expense to return", required = true) @Valid @RequestParam(value = "expenseKey", required = true) String expenseKey)
            throws Exception;

    @ApiOperation(value = "expenses list", nickname = "getExpenseList", notes = "Returns the list of all expenses", response = Expense.class, responseContainer = "List", authorizations = {
            @Authorization(value = "bearerAuth")
    }, tags = { "expense", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Expense.class, responseContainer = "List") })
    @RequestMapping(value = "/expense/all", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<List<Expense>> getExpenseList() throws Exception;

    @ApiOperation(value = "Update expense", nickname = "updateExpense", notes = "Updates the expense", authorizations = {
            @Authorization(value = "bearerAuth")
    }, tags = { "expense", })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Expense not found"),
            @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/expense/edit", produces = { "application/json" }, consumes = {
            "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Void> updateExpense(
            @ApiParam(value = "Expense object that needs to be updated to the store", required = true) @Valid @RequestBody Expense body)
            throws Exception;

    @ApiOperation(value = "get expense by id", nickname = "getExpense", notes = "Returns the particular expense", response = Income.class, authorizations = {
            @Authorization(value = "bearerAuth")
    }, tags = { "expense", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Income.class) })
    @RequestMapping(value = "/expense/{expenseId}", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Expense> getExpense(
            @ApiParam(value = "id to search for expense", required = true) @PathVariable("expenseId") String expenseId)
            throws Exception;

}
